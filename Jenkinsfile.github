/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library@main') _

/* General Notes

    The general flows of this Jenkinsfiel are as follows:
    - If not building on a tag, all the images are built except for the base image to save time.
    - If not building on a tag, the common image and its derivates must build.
    - If not building on a tag, a google and metal image must be built and published together.
    - If building on a tag, nothing is built; building on a tag should promote the current HASH of the branch to a pre-release or release (depending on the tag).
    
    NOTE: Until the PIT Common layer produces an ISO it is skipped, it takes time to build and isn't used at all in its current form.
 */

// Release toggles; define stable, and when to rebuild from a stable branch.
def promotionToken = ~"(master|main|develop|lts\\/.*)"
def buildAndPublish = env.TAG_NAME == null && !(env.BRANCH_NAME ==~ promotionToken) ? true : false
def sourceBuildVersion = '[RELEASE]' // Pulls the latest release

// Rebuild toggles; never build base or common unless explicitly enabled by a parameter.
def rebuildBaseLayers = env.BRANCH_NAME ==~ "lts\\/.*" ? true : false
def rebuildCommonLayers = env.BRANCH_NAME ==~ "lts\\/.*" ? true : false

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

def artifactoryURL = 'https://artifactory.algol60.net/artifactory'
pipeline {
    agent {
        label "metal-gcp-builder-large"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: "30", artifactDaysToKeepStr: "2"))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        ARTIFACTS_DIRECTORY_BASE = "output-sles15-base"
        ARTIFACTS_DIRECTORY_COMMON = "output-ncn-common"
        ARTIFACTS_DIRECTORY_K8S = "output-ncn-node-images/kubernetes"
        ARTIFACTS_DIRECTORY_PIT = "output-ncn-node-images/pre-install-toolkit"
        ARTIFACTS_DIRECTORY_CEPH = "output-ncn-node-images/storage-ceph"
        ISO = "SLE-15-SP3-Online-x86_64-GM-Media1.iso"
        ISO_URL = "${artifactoryURL}/os-images"
        NPROC = sh(returnStdout: true, script: "nproc").trim()
        NRAM = '8196'
        STABLE_BASE = "${artifactoryURL}/csm-images/stable"
        VERSION = setImageVersion(commitHashShort: GIT_COMMIT[0..6])
    }

    parameters {
        booleanParam(name: 'buildAndPublish', defaultValue: buildAndPublish, description: 'Whether to actually build an image (this should be unchecked for git-tags, main, and lts/* builds unless a full rebuild is desired of that branch).')
        booleanParam(name: 'rebuildBaseLayers', defaultValue: rebuildBaseLayers, description: 'If enabled, the base layer will rebuild (this inheritly will rebuild the common layer as well regardless if rebuildCommonLayer is unchecked.')
        booleanParam(name: 'rebuildCommonLayers', defaultValue: rebuildCommonLayers, description: 'If enabled, the common layer will rebuild.')
        string(name: 'googleSourceImageProjectId', defaultValue: "artifactory-202004", description: 'The source Project ID for pulling Google images.')
    }

    stages {
        stage('Setup') {
            parallel {
                stage('autoinst.xml') {
                    when {
                        expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildBaseLayers }
                    }
                    steps {
                        withCredentials([
                                string(credentialsId: 'sles15-registration-code', variable: 'SLES15_REGISTRATION_CODE'),
                                string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
                        ]) {
                            script {
                                sh './scripts/setup.sh'
                            }
                        }
                    }
                }
                stage('Fetch ISO') {
                    when {
                        expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildBaseLayers }
                    }
                    steps {
                        script {
                            dir('iso') {
                                httpRequest(authentication: 'artifactory-algol60', outputFile: "${ISO}", responseHandle: 'NONE', url: "${env.ISO_URL}/${env.ISO}")
                            }
                        }
                    }
                }
                stage('Packer Plugins') {
                    steps {
                        script {
                            sh 'packer init boxes/ncn-node-images/variables.pkr.hcl'
                        }
                    }
                }
            }
        }
        stage('Base Layers') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseLayers }
            }
            parallel {
                stage('SLES') {
                    steps {
                        withCredentials([
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY'),
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
                        ]) {
                            script {
                                def arguments
                                arguments = "-except=virtualbox-iso.* -var 'source_iso_uri=iso/${env.ISO}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/sles15-base/')
                                publishCsmImages.prepareArtifacts("${env.ARTIFACTS_DIRECTORY_BASE}-qemu", VERSION)
                                publishCsmImages.prepareArtifacts("${env.ARTIFACTS_DIRECTORY_BASE}-google", VERSION)
                                def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${env.ISO_URL}/${env.ISO}"
                                publishCsmImages(pattern: "${env.ARTIFACTS_DIRECTORY_BASE}-qemu", imageName: 'sles15-base', version: env.VERSION, props: props)
                                sh './scripts/google/import.sh'
                            }
                        }
                    }
                }
            }
        }
        stage('Common Layers') {
            when {
                expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildCommonLayers }
            }
            parallel {
                stage('Non-Compute Common') {
                    when {
                        expression { params.rebuildBaseLayers || params.rebuildCommonLayers }
                    }
                    steps {
                        withCredentials([
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            script {

                                def base = "sles15-base"
                                def googleSourceImageFamily = "vshasta-${base}"
                                def googleSourceArtifact
                                def sourceArtifact
                                def arguments
                                def props
                                def source

                                // If the previous layer wasn't built in this job, resolve the artifacts.
                                if (!params.rebuildBaseLayers) {
                                    // If we're not pulling the latest artifact, resolve the necessary IDs.
                                    if (sourceBuildVersion != "[RELEASE]") {
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                        sourceArtifact = "${base}-${sourceBuildVersion}"
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, sourceBuildVersion)
                                        // If we are pulling the latest artifact, resolve th enecessary IDs.
                                    } else {
                                        source = "${STABLE_BASE}/${base}/${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}/${base}-${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}"
                                        response = httpRequest(authentication: 'artifactory-algol60', url: "${artifactoryURL}/api/search/latestVersion?g=stable&a=${base}")
                                        sourceArtifactVersion = response.content
                                        sourceArtifact = "${base}-${sourceArtifactVersion}"
                                        googleSourceArtifact = "vshasta-${base}-${sourceArtifactVersion.replaceAll("\\.", "-")}"
                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_BASE}-qemu") {
                                        httpRequest(authentication: 'artifactory-algol60', outputFile: "${sourceArtifact}.qcow2", responseHandle: 'NONE', url: "${source}.qcow2")
                                    }
                                } else {
                                    // If the previous layer was built, then use that local artifact.
                                    sourceArtifact = "${base}-${VERSION}"
                                    googleSourceArtifact = "vshasta-${base}-${VERSION}"
                                }
                                arguments = "-except=virtualbox-ovf.* -only='*.ncn-common' -var 'google_source_image_name=${googleSourceArtifact}' -var 'source_iso_uri=${env.ARTIFACTS_DIRECTORY_BASE}-qemu/${sourceArtifact}.qcow2' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-common/')
                                publishCsmImages.prepareArtifacts("${ARTIFACTS_DIRECTORY_COMMON}-qemu", VERSION)
                                props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${sourceArtifact}"
                                publishCsmImages(pattern: "${ARTIFACTS_DIRECTORY_COMMON}-qemu", imageName: 'ncn-common', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
            }
        }
        stage('NCN Node Layers') {
            when {
                expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
            }
            parallel {
                stage('Kubernetes') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                        ]) {
                            script {
                                
                                def base = "ncn-common"
                                def googleSourceImageFamily = "vshasta-${base}"
                                def googleSourceArtifact
                                def sourceArtifact
                                def arguments
                                def props
                                def source

                                // If the previous layer wasn't built in this job, resolve the artifacts.
                                if (!params.rebuildCommonLayers) {
                                    // If we're not pulling the latest artifact, resolve the necessary IDs.
                                    if (sourceBuildVersion != "[RELEASE]") {
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                        sourceArtifact = "${base}-${sourceBuildVersion}"
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, sourceBuildVersion)
                                        // If we are pulling the latest artifact, resolve th enecessary IDs.
                                    } else {
                                        source = "${STABLE_BASE}/${base}/${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}/${base}-${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}"
                                        response = httpRequest(authentication: 'artifactory-algol60', url: "${artifactoryURL}/api/search/latestVersion?g=stable&a=${base}")
                                        sourceArtifactVersion = response.content
                                        sourceArtifact = "${base}-${sourceArtifactVersion}"
                                        googleSourceArtifact = "vshasta-${base}-${sourceArtifactVersion.replaceAll("\\.", "-")}"
                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_COMMON}-qemu") {
                                        httpRequest(authentication: 'artifactory-algol60', outputFile: "${sourceArtifact}.qcow2", responseHandle: 'NONE', url: "${source}.qcow2")
                                    }
                                } else {
                                    // If the previous layer was built, then use that local artifact.
                                    sourceArtifact = "${base}-${VERSION}"
                                    googleSourceArtifact = "vshasta-${base}-${VERSION}"
                                }
                                arguments = "-except='virtualbox-ovf.*' -only='*.kubernetes' -var 'google_source_image_name=${googleSourceArtifact}' -var 'source_iso_uri=${env.ARTIFACTS_DIRECTORY_COMMON}-qemu/${sourceArtifact}.qcow2' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
                                publishCsmImages.prepareArtifacts("${ARTIFACTS_DIRECTORY_K8S}-qemu", env.VERSION)
                                props = "build.number=${VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${sourceArtifact}"
                                publishCsmImages(pattern: "${ARTIFACTS_DIRECTORY_K8S}-qemu", imageName: 'kubernetes', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
                stage('Pre-Install Toolkit') {
                    environment {
                        /*
                    The following variables are for the pit layer:
                    - BUILD_DATE
                    - GIT_HASH
                    - GIT_TAG
                    - PKG_VAR_pit_slug

                    These have to be the same for every pit build between Google and Metal. If these moved into the Google and Metal stages
                    then they would differ by a few seconds. The only way to make them the same in the Jenkinsfile's current state is to define them
                    for all four common builds (ncn-common:google, ncn-common:metal, pit:google, pit:metal).
                */
                        BUILD_DATE = sh(returnStdout: true, script: "date -u '+%Y%m%d%H%M%S'").trim()
                        GIT_HASH = "${GIT_COMMIT[0..6]}"
                        GIT_TAG = sh(returnStdout: true, script: "git fetch origin --tags && git describe --tags --abbrev=0").trim()
                        PKR_VAR_pit_slug = "${GIT_TAG}/${BUILD_DATE}/g${GIT_HASH}"
                    }
                    steps {
                        withCredentials([
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
                        ]) {
                            script {

                                def base = "ncn-common"
                                def googleSourceImageFamily = "vshasta-${base}"
                                def googleSourceArtifact
                                def sourceArtifact
                                def arguments
                                def props
                                def source

                                // If the previous layer wasn't built in this job, resolve the artifacts.
                                if (!params.rebuildCommonLayers) {
                                    // If we're not pulling the latest artifact, resolve the necessary IDs.
                                    if (sourceBuildVersion != "[RELEASE]") {
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                        sourceArtifact = "${base}-${sourceBuildVersion}"
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, sourceBuildVersion)
                                        // If we are pulling the latest artifact, resolve th enecessary IDs.
                                    } else {
                                        source = "${STABLE_BASE}/${base}/${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}/${base}-${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}"
                                        response = httpRequest(authentication: 'artifactory-algol60', url: "${artifactoryURL}/api/search/latestVersion?g=stable&a=${base}")
                                        sourceArtifactVersion = response.content
                                        sourceArtifact = "${base}-${sourceArtifactVersion}"
                                        googleSourceArtifact = "vshasta-${base}-${sourceArtifactVersion.replaceAll("\\.", "-")}"
                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_COMMON}-qemu") {
                                        httpRequest(authentication: 'artifactory-algol60', outputFile: "${sourceArtifact}.qcow2", responseHandle: 'NONE', url: "${source}.qcow2")
                                    }
                                } else {
                                    // If the previous layer was built, then use that local artifact.
                                    sourceArtifact = "${base}-${VERSION}"
                                    googleSourceArtifact = "vshasta-${base}-${VERSION}"
                                }
                                arguments = "-except='virtualbox-ovf.*' -only='*.pre-install-toolkit' -var 'google_source_image_name=${googleSourceArtifact}' -var 'source_iso_uri=${env.ARTIFACTS_DIRECTORY_COMMON}-qemu/${sourceArtifact}.qcow2' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
                                publishCsmImages.prepareArtifacts("${ARTIFACTS_DIRECTORY_PIT}-qemu", env.VERSION)
                                props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${sourceArtifact}"
                                publishCsmImages(pattern: "${ARTIFACTS_DIRECTORY_PIT}-qemu", imageName: 'pre-install-toolkit', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
                stage('Storage-CEPH') {
                    steps {
                        withCredentials([
                                file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY'),
                                file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                                string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                                usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            script {

                                def base = "ncn-common"
                                def googleSourceImageFamily = "vshasta-${base}"
                                def googleSourceArtifact
                                def sourceArtifact
                                def arguments
                                def props
                                def source

                                // If the previous layer wasn't built in this job, resolve the artifacts.
                                if (!params.rebuildCommonLayers) {
                                    // If we're not pulling the latest artifact, resolve the necessary IDs.
                                    if (sourceBuildVersion != "[RELEASE]") {
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                        sourceArtifact = "${base}-${sourceBuildVersion}"
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, sourceBuildVersion)
                                        // If we are pulling the latest artifact, resolve th enecessary IDs.
                                    } else {
                                        source = "${STABLE_BASE}/${base}/${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}/${base}-${java.net.URLEncoder.encode("${sourceBuildVersion}", "UTF-8")}"
                                        response = httpRequest(authentication: 'artifactory-algol60', url: "${artifactoryURL}/api/search/latestVersion?g=stable&a=${base}")
                                        sourceArtifactVersion = response.content
                                        sourceArtifact = "${base}-${sourceArtifactVersion}"
                                        googleSourceArtifact = "vshasta-${base}-${sourceArtifactVersion.replaceAll("\\.", "-")}"
                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_COMMON}-qemu") {
                                        httpRequest(authentication: 'artifactory-algol60', outputFile: "${sourceArtifact}.qcow2", responseHandle: 'NONE', url: "${source}.qcow2")
                                    }
                                } else {
                                    // If the previous layer was built, then use that local artifact.
                                    sourceArtifact = "${base}-${VERSION}"
                                    googleSourceArtifact = "vshasta-${base}-${VERSION}"
                                }
                                arguments = "-except='virtualbox-ovf.*' --only='*.storage-ceph' -var 'google_source_image_name=${googleSourceArtifact}' -var 'source_iso_uri=${env.ARTIFACTS_DIRECTORY_COMMON}-qemu/${sourceArtifact}.qcow2' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
                                publishCsmImages.prepareArtifacts("${ARTIFACTS_DIRECTORY_CEPH}-qemu", env.VERSION)
                                props = "build.number=${VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${sourceArtifact}"
                                publishCsmImages(pattern: "${ARTIFACTS_DIRECTORY_CEPH}-qemu", imageName: 'storage-ceph', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
            }
        }
        stage('Release') {
            when { tag "*" }
            steps {
                withCredentials([
                        file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY'),
                        usernamePassword(credentialsId: 'artifactory-algol60-publish', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                ]) {
                    script {
                        /*
                            Use a try/catch block to prevent sles15-base and pit from requiring an administrator to manually build a git-tag. This
                            manual process is tedious, and prone to mistakes, this way the Jenkins pipeline will always try to publish these layers.
                        */
                        try {
                            publishCsmImages.release('sles15-base', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        } catch (err) {
                            echo err.getMessage()
                            echo 'The build attempted to publish a sles15-base image but none was found, this may or may not be expected.'
                        }
                        try {
                            publishCsmImages.release('ncn-common', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        } catch (err) {
                            echo err.getMessage()
                            echo 'The build attempted to publish a ncn-common image but none was found, this may or may not be expected.'
                        }
                        try {
                            publishCsmImages.release('pre-install-toolkit', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        } catch (err) {
                            echo err.getMessage()
                            echo 'The build attempted to publish a pre-install-toolkit image but none was found, this may or may not be expected.'
                        }
                        try {
                            publishCsmImages.release('kubernetes', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        } catch (err) {
                            echo err.getMessage()
                            echo 'The build attempted to publish a kubernetes image but none was found, this may or may not be expected.'
                        }
                        try {
                            publishCsmImages.release('storage-ceph', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        } catch (err) {
                            echo err.getMessage()
                            echo 'The build attempted to publish a storage-ceph image but none was found, this may or may not be expected.'
                        }
                    }
                }
            }
        }
    }
    post('Tests Results') {
        always {
            script {
                if (env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish))) {
                    // TODO: Each file needs it's own name.
                    def testDirectory = "build-test-results"
                    sh "mkdir -v $testDirectory"
                    sh "find ./output* -name *.xml -exec cp {} $testDirectory/ \\;"
                    sh "ls -l $testDirectory"
                    // A try/catch won't flunk the build; we don't want to flunk the build.
                    try {
                        junit 'build-test-results/test-results-*.xml'
                    } catch (err) {
                        echo err.getMessage()
                        echo "The build didn't have any test results, or the test results were not readable."
                    }
                } else {
                    echo 'No test results available on tag builds or production branch builds.'
                }
            }
        }
    }
}
