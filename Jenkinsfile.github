@Library('csm-shared-library@main') _

def promotionToken = ~"(master|main|develop|lts\\/.*)"
def buildAndPublish = env.TAG_NAME == null && !(env.BRANCH_NAME ==~ promotionToken) ? true : false
def buildGoogle = true
def buildPIT = false // Toggle to True once we have ISOs working (MTL-1476)
def rebuildBaseImage = false
def rebuildCommonImage = true
def sourceBuildVersion = '\\\\[RELEASE\\\\]' // Pulls the latest release
def googleSourceBuildVersion = sourceBuildVersion == '\\\\[RELEASE\\\\]' ? '[RELEASE]' : sourceBuildVersion

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if ( env.BRANCH_NAME ==~ ~"^PR-\\d+" ) {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

pipeline {

    agent {
        label "metal-gcp-builder-large"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: "30", artifactDaysToKeepStr: "2"))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        NAME = "cray-node-image-build"
        DESCRIPTION = "Cray Management System Node Image Builder"
        VERSION = setImageVersion(commitHashShort: GIT_COMMIT[0..6])
        ARTIFACTS_DIRECTORY_BASE = "output-sles15-base"
        ARTIFACTS_DIRECTORY_COMMON = "output-ncn-common"
        ARTIFACTS_DIRECTORY_CEPH = "output-ncn-node-images/storage-ceph"
        ARTIFACTS_DIRECTORY_K8S = "output-ncn-node-images/kubernetes"
        ARTIFACTS_DIRECTORY_PIT = "output-pit-common"
        ISO_URL = "https://artifactory.algol60.net/artifactory/os-images/SLE-15-SP3-Online-x86_64-GM-Media1.iso"
        STABLE_BASE = "https://artifactory.algol60.net/artifactory/csm-images/stable"
        NPROC = sh(returnStdout: true, script: "nproc").trim()
        NRAM = '4096'
        BUILD_DATE = sh(returnStdout: true, script: "date -u '+%Y%m%d%H%M%S'").trim()
        GIT_TAG = sh(returnStdout: true, script: "git fetch origin --tags && git describe --tags --abbrev=0").trim()
        GIT_HASH = "${GIT_COMMIT[0..6]}"
        PKR_VAR_pit_slug = "${GIT_TAG}/${BUILD_DATE}/g${GIT_HASH}"
    }

    parameters {
        booleanParam(name: 'buildAndPublish', defaultValue: buildAndPublish, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to actually rebuild and publish for a stable merge build job.')
        booleanParam(name: 'rebuildBaseImage', defaultValue: rebuildBaseImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the base image; unchecked will pull latest STABLE base. (This overrides rebuildCommonImage; if this is true, rebuildCommonImage is bypassed.)')
        booleanParam(name: 'buildGoogle', defaultValue: buildGoogle, description: 'Build Google images for vshasta.')
        booleanParam(name: 'buildPIT', defaultValue: buildPIT, description: 'Build the PIT Image (disabled until MTL-1476).')
        booleanParam(name: 'rebuildCommonImage', defaultValue: rebuildCommonImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the common image; unchecked will pull latest STABLE ncn-common.')
        string(name: 'googleSourceImageProjectId', defaultValue: "artifactory-202004", description: 'The source Project ID for pulling Google images.')
    }

    triggers {
        parameterizedCron(env.BRANCH_NAME == 'main' ? '''
            # 6am UTC / midnight CT
            0 6 * * * %buildAndPublish=true; rebuildBaseImage=true; buildGoogle=true; rebuildCommonImage=true
        ''' : '')
    }

    stages {
        stage('Fetch SLES ISO') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage }
            }
            steps {
                dir('iso') {
                    withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                    ]) {
                        sh "curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O ${ISO_URL}"
                    }
                }
            }
        }
        stage('Process template files') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                    string(credentialsId: 'sles15-registration-code', variable: 'SLES15_REGISTRATION_CODE')
                ]) {
                    sh '''
                        ./scripts/setup.sh
                    '''
                }
            }
        }
        stage("Build base") {
            when {
                expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage  }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
                ]) {
                    script {
                        def arguments = "-only=qemu.sles15-base -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                        publishCsmImages.build(arguments, 'boxes/sles15-base/')
                        publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_BASE, VERSION)
                    }
                }
            }
        }
        stage('Upload Base to Artifactory') {
            when {
                expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage }
            }
            steps {
                script {
                    // TODO: Move up to build base step
                    def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${ISO_URL}"
                    publishCsmImages(pattern: ARTIFACTS_DIRECTORY_BASE, imageName: 'sles15-base', version: env.VERSION, props: props)
                }
            }
        }
        stage("Build Common and upload GCP Base") {
            parallel {
                stage('Upload Base to Google') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildBaseImage }
                        expression { params.buildGoogle }
                    }
                    steps {
                        withCredentials([
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                        ]) {
                            script {
                                sh "./scripts/google/import.sh"
                            }
                        }
                    }
                }
                stage('QEMU Common') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildCommonImage }
                    }
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            script {
                                // Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def qcow = "sles15-base-${VERSION}.qcow2"
                                def source = "${ARTIFACTS_DIRECTORY_BASE}/${qcow}"
                                if (!params.rebuildBaseImage) {
                                    source = "${STABLE_BASE}/sles15-base/${sourceBuildVersion}/sles15-base-${sourceBuildVersion}.qcow2"
                                    if (sourceBuildVersion != "\\\\[RELEASE\\\\]") {
                                        // We must want a different build than latest
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                    } else {

                                    }
                                }
                                dir("${env.ARTIFACTS_DIRECTORY_BASE}") {
                                    sh "curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} \"${source}\" --output ${qcow}"
                                }
                                def arguments = "-only=qemu.ncn-common -var 'source_iso_uri='${env.ARTIFACTS_DIRECTORY_BASE}/${qcow} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-common/')
                                publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_COMMON, VERSION)
                                def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
                                publishCsmImages(pattern: ARTIFACTS_DIRECTORY_COMMON, imageName: 'ncn-common', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
                stage('QEMU PIT Common') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildCommonImage }
                        expression { params.buildPIT }
                    }
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            script {
                                // Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def qcow = "sles15-base-${VERSION}.qcow2"
                                def source = "${ARTIFACTS_DIRECTORY_BASE}/${qcow}"
                                if (!params.rebuildBaseImage) {
                                    source = "https://${STABLE_BASE}/sles15-base/${sourceBuildVersion}/sles15-base-${sourceBuildVersion}.qcow2"
                                    if (sourceBuildVersion != "\\\\[RELEASE\\\\]") {
                                        // We must want a different build than latest
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                    } else {

                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_BASE}") {
                                        sh "curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} \"${source}\" --output ${qcow}"
                                    }
                                }
                                def arguments = "-only=qemu.pit-common -var 'source_iso_uri='${env.ARTIFACTS_DIRECTORY_BASE}/${qcow} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/pit-common/')
                                publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_PIT, VERSION)
                                def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
                                publishCsmImages(pattern: ARTIFACTS_DIRECTORY_PIT, imageName: 'pit-common', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
            }
        }
        stage("Build GCP Common and PIT") {
            parallel {
                stage('GCP Common') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildCommonImage }
                        expression { params.buildGoogle }
                    }
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                        ]) {
                            script {
                                // Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def googleSourceArtifact = "vshasta-sles15-base-${VERSION}"
                                def googleSourceImageFamily = "vshasta-sles15-base"
                                if (!params.rebuildBaseImage) {
                                    if (googleSourceBuildVersion != "[RELEASE]") {
                                        // We must want a different build than latest
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, googleSourceBuildVersion)
                                    } else {
                                        googleSourceArtifact = getGoogleCloudSourceArtifact(
                                            googleCloudSaKey: GOOGLE_CLOUD_SA_KEY,
                                            googleCloudProject: params.googleSourceImageProjectId,
                                            googleCloudFamily: googleSourceImageFamily
                                        )
                                    }
                                }
                                def googleArguments = "-only=googlecompute.ncn-common -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(googleArguments, 'boxes/ncn-common/')
                            }
                        }
                    }
                }
                stage('GCP PIT Common') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.rebuildCommonImage }
                        expression { params.buildGoogle }
                        expression { params.buildPIT }
                    }
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                        ]) {
                            script {
                                // Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def googleSourceArtifact = "vshasta-sles15-base-${VERSION}"
                                googleSourceImageFamily = "vshasta-sles15-base"
                                if (!params.rebuildBaseImage) {
                                    if (googleSourceBuildVersion != "[RELEASE]") {
                                        // We must want a different build than latest
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, googleSourceBuildVersion)
                                    } else {
                                        googleSourceArtifact = getGoogleCloudSourceArtifact(
                                            googleCloudSaKey: GOOGLE_CLOUD_SA_KEY,
                                            googleCloudProject: params.googleSourceImageProjectId,
                                            googleCloudFamily: googleSourceImageFamily
                                        )
                                    }
                                }
                                def googleArguments = "-only=googlecompute.pit-common -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(googleArguments, 'boxes/pit-common/')
                            }
                        }
                    }
                }
            }
        }
        // Always build.
        // TODO: Allow building either or in Jenkins.
        stage("Build images") {
            parallel {
                stage('QEMU Node Images') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                    }

                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            script {
                                // Did we build common? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def qcow = "ncn-common-${VERSION}.qcow2"
                                def source = "${ARTIFACTS_DIRECTORY_COMMON}/${qcow}"
                                if (!params.rebuildCommonImage) {
                                    source = "https://${STABLE_BASE}/ncn-common/${sourceBuildVersion}/ncn-common-${sourceBuildVersion}.qcow2"
                                    if (sourceBuildVersion != "\\\\[RELEASE\\\\]") {
                                        // We must want a different build than latest
                                        source = nodeImageHelpers.getArtifactorySourceArtifactFromId(source, sourceBuildVersion)
                                    } else {

                                    }
                                    dir("${env.ARTIFACTS_DIRECTORY_COMMON}") {
                                        sh "curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} \"${source}\" --output ${qcow}"
                                    }
                                }
                                def arguments = "-only=qemu.* -var 'source_iso_uri='${env.ARTIFACTS_DIRECTORY_COMMON}/${qcow} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
                                publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_K8S, env.VERSION)
                                publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_CEPH, env.VERSION)
                                def props = "build.number=${VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
                                publishCsmImages(pattern: ARTIFACTS_DIRECTORY_K8S, imageName: 'kubernetes', version: env.VERSION, props: props)
                                publishCsmImages(pattern: ARTIFACTS_DIRECTORY_CEPH, imageName: 'storage-ceph', version: env.VERSION, props: props)
                            }
                        }
                    }
                }
                stage('GCP Node Images') {
                    when {
                        expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                        expression { params.buildGoogle }
                    }
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
                            file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                        ]) {
                            script {
                                // Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
                                def googleSourceArtifact = "vshasta-ncn-common-${VERSION}"
                                def googleSourceImageFamily = "vshasta-ncn-common"
                                if (!params.rebuildCommonImage) {
                                    if (googleSourceBuildVersion != "[RELEASE]") {
                                        // We must want a different build than latest
                                        googleSourceArtifact = nodeImageHelpers.getGoogleCloudSourceArtifactFromId(googleSourceImageFamily, googleSourceBuildVersion)
                                    } else {
                                        googleSourceArtifact = getGoogleCloudSourceArtifact(
                                            googleCloudSaKey: GOOGLE_CLOUD_SA_KEY,
                                            googleCloudProject: params.googleSourceImageProjectId,
                                            googleCloudFamily: googleSourceImageFamily
                                        )
                                    }
                                }

                                def googleArguments = "-only=googlecompute.* -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
                                publishCsmImages.build(googleArguments, 'boxes/ncn-node-images/')
                            }
                        }
                    }
                }
            }
        }
        // This should run stand-alone; nothing should build when we release, we're just moving things within artifactory.
        stage('Release') {
            when { tag "*" }
            steps {
                withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
                        file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
                ]) {
                    script {
                        if (params.rebuildBaseImage) {
                            publishCsmImages.release('sles15-base', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        }
                        if (params.rebuildCommonImage) {
                            publishCsmImages.release('ncn-common', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        }
                        if (params.buildPIT) {
                            publishCsmImages.release('pit-common', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        }
                        publishCsmImages.release('storage-ceph', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                        publishCsmImages.release('kubernetes', GIT_COMMIT[0..6], env.TAG_NAME, GOOGLE_CLOUD_SA_KEY)
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'I hope you have a nice day!'
        }
        success {
            echo 'The build was: success'
        }
        unstable {
            echo 'The build was: unstable'
        }
        failure {
            echo 'The build was: failure'
        }
        changed {
            echo 'The build was: changed'
        }
    }
}
