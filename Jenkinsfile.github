@Library('csm-shared-library@main') _

def promotionToken = ~"(master|main|develop|lts\\/.*)"
def buildAndPublish = env.TAG_NAME == null && !(env.BRANCH_NAME ==~ promotionToken) ? true : false
def buildGoogle = true
def rebuildBaseImage = buildAndPublish ? true : false

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if ( env.BRANCH_NAME ==~ ~"^PR-\\d+" ) {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

pipeline {

    agent {
        label "metal-gcp-builder-large"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: "30", artifactDaysToKeepStr: "2"))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        NAME = "cray-node-image-build"
        DESCRIPTION = "Cray Management System Node Image Builder"
        IS_STABLE = getBuildIsStable()
        VERSION = setImageVersion(commitHashShort: GIT_COMMIT[0..6])
        ARTIFACTS_DIRECTORY_BASE = "output-sles15-base"
        ARTIFACTS_DIRECTORY_COMMON = "output-ncn-common"
        ARTIFACTS_DIRECTORY_CEPH = "output-ncn-node-images/storage-ceph"
        ARTIFACTS_DIRECTORY_K8S = "output-ncn-node-images/kubernetes"
        ISO_URL = "https://artifactory.algol60.net/artifactory/os-images/SLE-15-SP3-Online-x86_64-GM-Media1.iso"
        STABLE_BASE = "https://artifactory.algol60.net/artifactory/csm-images/stable"
        NPROC = sh(returnStdout: true, script: "nproc").trim()
        NRAM = '4096'
    }

    parameters {
        booleanParam(name: 'buildAndPublish', defaultValue: buildAndPublish, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to actually rebuild and publish for a stable merge build job.')
        booleanParam(name: 'rebuildBaseImage', defaultValue: rebuildBaseImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the base image; unchecked will pull latest STABLE base. (This overrides rebuildCommonImage; if this is true, rebuildCommonImage is bypassed.)')
        booleanParam(name: 'buildGoogle', defaultValue: buildGoogle, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build Google images for vshasta.)')
        booleanParam(name: 'rebuildCommonImage', defaultValue: rebuildBaseImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the common image; unchecked will pull latest STABLE ncn-common.')
        string(name: 'csmRpmBranch', defaultValue: "release/1.2", description: 'The branch or ref to use when checking out csm-rpm repo for repo list and package lock versions.')
        string(name: 'csmRpmRepo', defaultValue: "https://github.com/Cray-HPE/csm-rpms.git", description: 'The repo URL (HTTPS) to use for checking out csm-rpm.')
        string(name: 'sourceProjectId', defaultValue: "artifactory-202004", description: 'The source Project ID for pulling Google images.')
    }

    stages {
        stage('Checkout csm-rpms') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
            }
            steps {
                dir('csm-rpms') {
                    git credentialsId: 'jenkins-algol60-cray-hpe-github-integration', url: "${params.csmRpmRepo}", branch: "${params.csmRpmBranch}"
                }
            }
        }

        stage('Fetch SLES ISO') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildCommonImage) }
            }
            steps {
                dir('iso') {
                    withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                    ]) {
                        sh "curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O ${ISO_URL}"
                    }
                }
            }
        }
        stage('Process template files') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                    string(credentialsId: 'sles15-registration-code', variable: 'SLES15_REGISTRATION_CODE')
                ]) {
                    sh '''
                        ./scripts/setup.sh
                    '''
                }
            }
        }
        stage("Build base") {
			when {
				expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
				expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildCommonImage) }
			}
			steps {
				withCredentials([
					string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
				]) {
					script {
						def arguments = "-only=qemu.sles15-base -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
						publishCsmImages.build(arguments, 'boxes/sles15-base/')
					}
				}
			}
        }
        stage("Upload base and build common") {
        	parallel {
        		stage("Build with QEMU") {
        			stages {
						stage('Upload Base to Artifactory') {
							when {
								expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
								expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildCommonImage) }
							}
							steps {
								script {
									def props = "csm.repo.url=${params.csmRpmRepo};csm.repo.branch=${params.csmRpmBranch};build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${ISO_URL}"
									publishCsmImages(pattern: ARTIFACTS_DIRECTORY_BASE, imageName: 'sles15-base', version: env.VERSION, props: props)
								}
							}
						}
						stage('QEMU Common') {
							when {
								expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
								expression { params.rebuildCommonImage }
							}
							steps {
								withCredentials([
									string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
									usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
								]) {
									script {
										// If we didn't rebuild in this build, then always grab latest stable base.
										def source = params.rebuildBaseImage ? "${ARTIFACTS_DIRECTORY_BASE}/sles15-base-${VERSION}.qcow2" : "${STABLE_BASE}/sles15-base/[RELEASE]/sles15-base-[RELEASE].qcow2"
										def arguments = "-only=qemu.ncn-common -var 'source_iso_uri='${source} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
										publishCsmImages.build(arguments, 'boxes/ncn-common/')
										publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_COMMON, VERSION)
										def props = "csm.repo.url=${params.csmRpmRepo};csm.repo.branch=${params.csmRpmBranch};build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
										publishCsmImages(pattern: ARTIFACTS_DIRECTORY_COMMON, imageName: 'ncn-common', version: env.VERSION, props: props)
									}
								}
							}
						}
        			}
        		}
        		stage("Build with GCP") {
        			stages {
        				stage('Upload Base to Google') {
							when {
								expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
								expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildCommonImage) }
								expression { params.buildGoogle }
							}
							steps {
								withCredentials([
									file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
								]) {
									script {
										sh "./scripts/google/import.sh"
									}
								}
							}
						}
						stage('GCP Common') {
							when {
								expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
								expression { params.rebuildCommonImage }
								expression { params.buildGoogle }
							}
							steps {
								withCredentials([
									string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
									usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
									file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
									file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
								]) {
									script {
										// Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
										def googleSourceArtifact = params.rebuildBaseImage ? "vshasta-sles15-base-${VERSION}" : ""
										if (googleSourceArtifact == "") {
											googleSourceArtifact = getGoogleCloudSourceArtifact(
												googleCloudSaKey: env.GOOGLE_CLOUD_SA_KEY,
												googleCloudProject: params.sourceProjectId,
												googleCloudFamily: 'vshasta-sles15-base',
												fullUrl: false
											)
										}

										def googleArguments = "-only=googlecompute.ncn-common -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
										publishCsmImages.build(googleArguments, 'boxes/ncn-common/')
									}
								}
							}
						}
        			}
        		}
        	}
        }
        stage("Build Kubernetes and Storage-Ceph") {
        	parallel {
				stage('QEMU Kubernetes Image') {
					when {
						expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
					}

					steps {
						withCredentials([
							string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
							usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
						]) {
							script {
								def source = params.rebuildCommonImage ? "${ARTIFACTS_DIRECTORY_COMMON}/ncn-common-${VERSION}.qcow2" : "${STABLE_BASE}/ncn-common/[RELEASE]/ncn-common-[RELEASE].qcow2"
								def arguments = "-only=qemu.kubernetes -var 'source_iso_uri='${source} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
								publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
								publishCsmImages.prepareArtifacts("${ARTIFACTS_DIRECTORY_K8S}", env.VERSION)
								// List versions of k8s image components as artifact props - use it for csm manifest validation
								def kubernetesVersions = readJSON(text: sh(returnStdout: true, script: '''
									source ${WORKSPACE}/boxes/ncn-node-images/k8s/files/resources/common/vars.sh >&2
									echo $(cat <<-EOF
										{
											"KUBERNETES_VERSION": "v${KUBERNETES_PULL_VERSION}",
											"WEAVE_VERSION": "${WEAVE_VERSION}",
											"MULTUS_VERSION": "${MULTUS_VERSION}",
											"VELERO_VERSION": "${VELERO_VERSION}",
											"ETCD_VERSION": "${ETCD_VERSION}",
											"COREDNS_VERSION": "${COREDNS_VERSION}"
										}
									EOF
									)
								'''.stripIndent())).collect{k, v -> "csm.versions.${k}=${v}"}.join(";")
								def props = "csm.repo.url=${params.csmRpmRepo};csm.repo.branch=${params.csmRpmBranch};build.number=${VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source};${kubernetesVersions}"
								publishCsmImages(pattern: ARTIFACTS_DIRECTORY_K8S, imageName: 'kubernetes', version: env.VERSION, props: props)
							}
						}
					}
				}
				stage('QEMU Ceph Image') {
					when {
						expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
					}
					steps {
						withCredentials([
							string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
							usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
						]) {
							script {
								def source = params.rebuildCommonImage ? "${ARTIFACTS_DIRECTORY_COMMON}/ncn-common-${VERSION}.qcow2" : "${STABLE_BASE}/ncn-common/[RELEASE]/ncn-common-[RELEASE].qcow2"
								def arguments = "-only=qemu.storage-ceph -var 'source_iso_uri='${source} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
								publishCsmImages.build(arguments, 'boxes/ncn-node-images/')
								sh "ls -lhR ${ARTIFACTS_DIRECTORY_CEPH}"
								publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_CEPH, VERSION)
								sh "ls -lhR ${ARTIFACTS_DIRECTORY_CEPH}"
								def props = "csm.repo.url=${params.csmRpmRepo};csm.repo.branch=${params.csmRpmBranch};build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
								publishCsmImages(pattern: ARTIFACTS_DIRECTORY_CEPH, imageName: 'storage-ceph', version: VERSION, props: props)
							}
						}
					}
				}
				stage('GCP Kubernetes Image') {
					when {
						expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
						expression { params.rebuildCommonImage }
						expression { params.buildGoogle }
					}
					steps {
						withCredentials([
							string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
							usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
							file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
							file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
						]) {
							script {
								// Did we build common? If YES, just use the RC image we built. If NO then use the latest non-RC
								def googleSourceArtifact = params.rebuildBaseImage ? "vshasta-ncn-common-${VERSION}" : ""
								if (googleSourceArtifact == "") {
									googleSourceArtifact = getGoogleCloudSourceArtifact(
										googleCloudSaKey: env.GOOGLE_CLOUD_SA_KEY,
										googleCloudProject: params.sourceProjectId,
										googleCloudFamily: 'vshasta-ncn-common',
										fullUrl: false
									)
								}

								def googleArguments = "-only=googlecompute.kubernetes -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
								publishCsmImages.build(googleArguments, 'boxes/ncn-node-images/')
							}
						}
					}
				}
				stage('GCP Ceph Image') {
					when {
						expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
						expression { params.rebuildCommonImage }
						expression { params.buildGoogle }
					}
					steps {
						withCredentials([
							string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
							usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
							file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
							file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
						]) {
							script {
								// Did we build base? If YES, just use the RC image we build. If NO then use the latest non-RC
								def googleSourceArtifact = params.rebuildBaseImage ? "vshasta-ncn-common-${VERSION}" : ""
								if (googleSourceArtifact == "") {
									googleSourceArtifact = getGoogleCloudSourceArtifact(
										googleCloudSaKey: env.GOOGLE_CLOUD_SA_KEY,
										googleCloudProject: params.sourceProjectId,
										googleCloudFamily: 'vshasta-ncn-common',
										fullUrl: false
									)
								}

								def googleArguments = "-only=googlecompute.storage-ceph -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
								publishCsmImages.build(googleArguments, 'boxes/ncn-node-images/')
							}
						}
					}
				}
        	}
        }
        // This should run stand-alone; nothing should build when we release, we're just moving things within artifactory.
        stage('Release') {
            when { tag "*" }
            steps {
                withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                ]) {
                    script {
                        publishCsmImages.release('sles15-base', GIT_COMMIT[0..6], env.TAG_NAME)
                        publishCsmImages.release('ncn-common', GIT_COMMIT[0..6], env.TAG_NAME)
                        publishCsmImages.release('storage-ceph', GIT_COMMIT[0..6], env.TAG_NAME)
                        publishCsmImages.release('kubernetes', GIT_COMMIT[0..6], env.TAG_NAME)
                    }
                }
            }
        }
    }
}

