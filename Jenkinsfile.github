@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: "30", artifactDaysToKeepStr: "2"))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        NAME = "cray-node-image-build"
        DESCRIPTION = "Cray Management System Node Image Builder"
        IS_STABLE = getBuildIsStable()
        VERSION = setImageVersion(commitHashShort: env.GIT_COMMIT[0..6])
        ARTIFACTS_DIRECTORY_BASE = "output-sles15-base/*"
        ARTIFACTS_DIRECTORY_COMMON = "output-ncn-common/*"
        ARTIFACTS_DIRECTORY_CEPH = "output-ncn-node-images/storage-ceph/*"
        ARTIFACTS_DIRECTORY_K8S = "output-ncn-node-images/kubernetes/*"
        NPROC = sh(returnStdout: true, script: "nproc").trim()
    }

    stages {
        stage('Checkout csm-rpms') {
            steps {
                dir('csm-rpms') {
                    git credentialsId: 'jenkins-algol60-cray-hpe-github-integration', url: 'https://github.com/Cray-HPE/csm-rpms.git', branch: 'main'
                }
            }
        }
        stage('Fetch SLES ISO') {
            steps {
                dir('iso') {
                    withCredentials([
                        string(credentialsId: 'artifactory-user', variable: 'ARTIFACTORY_USER'),
                        string(credentialsId: 'artifactory-token', variable: 'ARTIFACTORY_TOKEN')
                    ]) {
                        sh 'curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O "https://artifactory.algol60.net/artifactory/os-images/SLE-15-SP3-Full-x86_64-GM-Media1.iso"'
                    }
                }
            }
        }
        stage('Process template files') {
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                    string(credentialsId: 'sles15-registration-code', variable: 'SLES15_REGISTRATION_CODE'),
                    string(credentialsId: 'artifactory-user', variable: 'ARTIFACTORY_USER'),
                    string(credentialsId: 'artifactory-token', variable: 'ARTIFACTORY_TOKEN')
                ]) {
                    sh """
                        ./scripts/render-templates.sh
                    """
                }
            }
        }
        stage("Build base") {
            parallel {
                stage('QEMU Base') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
                        ]) {
                            sh """
                                packer build -only=qemu.sles15-base -var 'artifact_version=${env.VERSION}' -var 'cpus=${env.NPROC}' -var 'memory=16384' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' boxes/sles15-base/
                            """
                        }
                    }
                }
            }
        }
        stage("Build common") {
            parallel {
                stage('QEMU Common') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            string(credentialsId: 'artifactory-user', variable: 'ARTIFACTORY_USER'),
                            string(credentialsId: 'artifactory-token', variable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            sh """
                                packer build -only=qemu.ncn-common -var 'artifact_version=${env.VERSION}' -var 'cpus=${env.NPROC}' -var 'memory=16384' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' boxes/ncn-common/
                            """
                        }
                    }
                }
            }
        }
        stage("Build images") {
            parallel {
                stage('QEMU Kubernetes Image') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            string(credentialsId: 'artifactory-user', variable: 'ARTIFACTORY_USER'),
                            string(credentialsId: 'artifactory-token', variable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            sh """
                                packer build -only=qemu.kubernetes -var 'artifact_version=${env.VERSION}' -var 'cpus=${env.NPROC}' -var 'memory=16384' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' boxes/ncn-node-images/
                            """
                        }
                    }
                }
                stage('QEMU Ceph Image') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                            string(credentialsId: 'artifactory-user', variable: 'ARTIFACTORY_USER'),
                            string(credentialsId: 'artifactory-token', variable: 'ARTIFACTORY_TOKEN')
                        ]) {
                            sh """
                                packer build -only=qemu.storage-ceph -var 'artifact_version=${env.VERSION}' -var 'cpus=${env.NPROC}' -var 'memory=16384' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' boxes/ncn-node-images/
                            """
                        }
                    }
                }
            }
        }
        stage("Publish") {
            steps {
                script {
                    def qemuSourceArtifact = "local"
                    def props = "build.url=${env.BUILD_URL};vcs.revision-short=${env.VERSION};build.source-artifact=${qemuSourceArtifact}"
                    publishCsmImages(pattern: env.ARTIFACTS_DIRECTORY_BASE, imageName: 'sles15-base', version: env.VERSION, props: props)
                    publishCsmImages(pattern: env.ARTIFACTS_DIRECTORY_COMMON, imageName: 'ncn-common', version: env.VERSION, props: props)
                    publishCsmImages(pattern: env.ARTIFACTS_DIRECTORY_CEPH, imageName: 'storage-ceph', version: env.VERSION, props: props)
                    publishCsmImages(pattern: env.ARTIFACTS_DIRECTORY_K8S, imageName: 'kubernetes', version: env.VERSION, props: props)
                }
            }
        }
    }
}
