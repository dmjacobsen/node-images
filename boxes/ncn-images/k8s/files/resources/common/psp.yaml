# This is the default PSP to be applied to all services unless another policy overrides
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  requiredDropCapabilities:
    - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'
  allowedHostPaths:
  # Only allow the Pod to mount a prefixed path - prevents traversal with readOnly set to true
  - pathPrefix: "/lustre"
    readOnly: false # only allow read-only mounts
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  seLinux:
    rule: RunAsAny
  readOnlyRootFilesystem: true
---
# This is the default PSP to be used temporarily while we sort out the issues preventing us from using the "restricted" policy
# This include the following modifications from the restricted policy
#   - requiredDropCapabilities has CHOWN removed
#   - runAsUser = "runAsAny"
#   - readOnlyRootFilesystem: false
#   - privileged: true
#   - allowPrivilegeEscalation: true
#   - remove requiredDropCapabilities
#   - add "NET_ADMIN" to allowedCapabilities
#   - add 'hostPath' to volumes (and added prefixPaths to allowedHostPaths)
#   - add 'flexVolume' to volumes
#   - hostNetwork: true

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted-transition
spec:
  privileged: true
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: true
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  allowedCapabilities:
  - 'NET_ADMIN'
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
    - 'hostPath'
    - 'flexVolume'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  allowedHostPaths:
  # Only allow the Pod to mount a prefixed path - prevents traversal with readOnly set to true
  - pathPrefix: "/lustre"
    readOnly: false # only allow read-only mounts
  - pathPrefix: "/root/registry"
    readOnly: false # only allow read-only mounts
  - pathPrefix: "/lib/modules"
    readOnly: false # only allow read-only mounts
  # "/" is needed by cray-nmd and cray-cps-cm-pm.  cray-nmd is temporary
  - pathPrefix: "/"
    readOnly: false # only allow read-only mounts
  - pathPrefix: "/var/lib/nfsroot/nmd"
    readOnly: false # only allow read-only mounts
  - pathPrefix: "/lus"
    readOnly: false # only allow read-only mounts
  - pathPrefix: "/var/tmp/cps-local"
    readOnly: false # only allow read-only mounts
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  seLinux:
    rule: RunAsAny
  readOnlyRootFilesystem: false
---
# This is the PSP to be used for pods in some namespaces and service accounts that need higher capabilities.
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: privileged
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
