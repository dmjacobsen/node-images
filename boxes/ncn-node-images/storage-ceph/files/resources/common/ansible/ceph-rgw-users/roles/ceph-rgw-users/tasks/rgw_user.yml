# Copyright 2019, Cray Inc. All Rights Reserved.
---
- name: Determine if running on cloud or metal
  shell: "craysys type get"
  register: infra_type
  ignore_errors: yes

- name: Set fact for base infrastructure
  set_fact:
    build_type: "{{ infra_type.stdout }}"
  ignore_errors: yes

- name: Ensure rgw {{ item.user_name }} user has been created
  command: "radosgw-admin user create --uid={{ item.user_name }} --display-name=\"{{ item.user_display_name }}\""
  register: create_rgw_user
  until: create_rgw_user.rc == 0 or create_rgw_user.rc == 17
  failed_when: create_rgw_user.rc != 0 and create_rgw_user.rc != 17
  changed_when: create_rgw_user.rc == 0

- name: Ensure rgw role has been created for {{ item.user_name }} user
  command: "radosgw-admin role create --role-name={{ item.role_name }} --path=/ --assume-role-policy-doc='{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"{{ item.role_arn }}\"]},\"Action\":[\"sts:AssumeRole\"]}]}'"
  register: create_rgw_role
  until: create_rgw_role.rc == 0 or create_rgw_role.rc == 17
  failed_when: create_rgw_role.rc != 0 and create_rgw_role.rc != 17
  changed_when: create_rgw_role.rc == 0

- name: Ensure rgw policy has been created for {{ item.user_name }} user
  command: "radosgw-admin role-policy put --role-name={{ item.role_name }} --policy-name={{ item.policy_name }} --policy-doc='{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[{{ item.policy_action }}],\"Resource\":[{{ item.policy_resource }}]}]}'"
  register: create_rgw_policy
  until: create_rgw_policy.rc == 0 or create_rgw_policy.rc == 17
  failed_when: create_rgw_policy.rc != 0 and create_rgw_policy.rc != 17
  changed_when: create_rgw_policy.rc == 0

- name: Gather {{ item.user_name }} user data from radosgw
  shell: radosgw-admin user info --uid={{ item.user_name }} | jq '.keys[] | select(.user=="{{ item.user_name }}")'
  no_log: true
  register: radosgw_output
  until: radosgw_output.rc == 0
  retries: 3
  delay: 5

- name: Remember STS creds for upcoming play
  no_log: true
  set_fact:
    sts_s3_user: "{{ radosgw_output.stdout | from_json }}"
  when: item.user_name == 'STS'

- name: Capture radosgw {{ item.user_name }} user output as JSON
  no_log: true
  set_fact:
    s3_user: "{{ radosgw_output.stdout | from_json }}"

- name: Encode Access Key for {{ item.user_name }} user
  shell: echo -n '{{ s3_user.access_key }}' | base64 -w0
  no_log: true
  register: encoded_access_key

- name: Encode Secret Key for {{ item.user_name }} user
  shell: echo -n '{{ s3_user.secret_key }}' | base64 -w0
  no_log: true
  register: encoded_secret_key

- name: Encode S3 Endpoint for {{ item.user_name }} user
  shell: echo -n "{{ cray_rgw_vip_endpoint_url }}" | base64 -w0
  no_log: true
  register: encoded_s3_endpoint
  when: build_type == "metal"

- name: Encode S3 Endpoint for {{ item.user_name }} user
  shell: echo -n "{{ cray_rgw_vshasta_endpoint_url }}" | base64 -w0
  no_log: true
  register: encoded_vshasta_s3_endpoint
  when: build_type == "google"

- name: Encode http S3 Endpoint for {{ item.user_name }} user
  shell: echo -n "{{ cray_http_rgw_vip_endpoint_url }}" | base64 -w0
  no_log: true
  register: encoded_http_s3_endpoint

- name: Encode https S3 Endpoint for {{ item.user_name }} user
  shell: echo -n "{{ cray_https_rgw_vip_endpoint_url }}" | base64 -w0
  no_log: true
  register: encoded_https_s3_endpoint

- name: Encode Firmware S3 Endpoint for {{ item.user_name }} user
  shell: echo -n "{{ cray_rgw_hmn_vip_endpoint_url }}" | base64 -w0
  no_log: true
  register: encoded_fw_s3_endpoint

- name: Set fact for S3 credentials for k8s secret for {{ item.user_name }} user
  no_log: true
  set_fact:
    secret_yaml: "{{ lookup('template', 's3-secret.yaml.j2') }}"

- name: Create S3 Credentials Secret for {{ item.user_name }} user in default namespace
  shell: echo '{{ secret_yaml }}' | kubectl apply -f -
  no_log: true
  register: secret_create_output
  until: secret_create_output.rc == 0
  retries: 3
  delay: 5

#  No other namespaces can be expected to exist at this point
- name: Create S3 Credentials Secret for {{ item.user_name }} user in additional namespace
  shell: echo '{{ secret_yaml }}' | kubectl apply -n '{{ item.additional_namespace }}' -f -
  no_log: true
  register: addl_ns_secret_create_output
  until: addl_ns_secret_create_output.rc == 0
  retries: 3
  delay: 5
  when: item.additional_namespace is defined
