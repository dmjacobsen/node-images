#!/usr/bin/env python3

import json
import sys
import argparse
from pathlib import Path
import importlib

DEFAULT_LEVEL = 'system'

def setup_cli(): # pragma: NO COVER
    """ Main entrypoint """
    # pylint: disable=line-too-long, fixme
    parser = argparse.ArgumentParser(
        description='craysys abstracts away some Cray system-type specific things to provide some common interfaces for all system types.')
    subparsers = parser.add_subparsers(title='commands', dest='command')

    type_subparser = subparsers.add_parser('type',
        help='Info about the current Cray system type')
    type_subparsers = type_subparser.add_subparsers(title='action', dest='action')
    type_get_subparser = type_subparsers.add_parser('get',
        help='Get the type of Cray system where this is running')

    metadata_subparser = subparsers.add_parser('metadata',
        help='Working with metadata for a node or the whole system')
    metadata_subparsers = metadata_subparser.add_subparsers(title='action', dest='action')
    metadata_get_subparser = metadata_subparsers.add_parser('get',
        help='Get a piece of metadata for the system by name.')
    metadata_get_subparser.add_argument('key', metavar='key', type=str,
        help='the key or name of the piece of metadata to retrieve')
    metadata_get_subparser.add_argument('--level', type=str, choices=['system','node'], default=DEFAULT_LEVEL,
        help='The level at which to look for the metadata key/value (default = {})'.format(DEFAULT_LEVEL))

    return parser.parse_args()

def get_system_type():
    if Path('/usr/bin/google_network_daemon').is_file():
        return 'google'
    else:
        return 'metal'

def get_system_type_lib():
    try:
        system_type = get_system_type()
        if system_type == 'google':
            return getattr(importlib.import_module('craygoogle'), 'CrayGoogle')()
        elif system_type == 'metal':
            return getattr(importlib.import_module('metal'), 'Metal')()
    except Exception as e:
        print(e)
        sys.exit(1)


if __name__ == '__main__':
    args = setup_cli()
    if args.command == 'type' and args.action == 'get':
        print(get_system_type())
        sys.exit(0)
    lib = get_system_type_lib()
    if args.command == 'metadata' and args.action == 'get':
        value = lib.get_metadata(args.key, args.level)
        if isinstance(value, str):
            print(value)
        else:
            print(json.dumps(value, indent=3, sort_keys=True))
